# -*- coding: utf-8 -*-
"""Perbandingan_RNN_dan_LSTM.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nC28HYCmVqdO4cV0dDWf1ll5EcbvFK4E
"""

#melakukan import library yang dibutuhkan

import matplotlib.pyplot as plt
import keras
import pandas as pd
import numpy as np
from keras.models import Sequential
from keras.layers import Dense
from keras.layers import LSTM, SimpleRNN
from keras.layers import Dropout
from keras.layers import *
from math import sqrt
import math
from sklearn.metrics import r2_score
from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics import mean_absolute_error

#from sklearn.model_selection import train_test_split
#from keras.callbacks import EarlyStopping

df = pd.read_csv('UNVR.csv') 
df #menampilkan dataset UNVR

df.isna().sum()

# Visualisasi data harga penutupan
plt.figure(figsize=(12,6))
plt.title('Riwayat Harga Penutupan Saham Microsoft', fontsize=24)
df['Date'] = pd.to_datetime(df['Date'])
plt.plot(df['Date'], df['Close'])

plt.xlabel('Year', fontsize=18)
plt.ylabel('Harga Penutupan (Rp)', fontsize=18)
plt.show()

data = df.filter(['Close'])
data

data.describe()

data_min = min(df['Close'])
data_min

data_max = max(df['Close'])
data_max

data_len = data.values
data_len

# Normalisasi data dengan range (0 - 1)
sc = MinMaxScaler(feature_range=(0, 1))
scaled_data = sc.fit_transform(data_len)
scaled_data

# Split dataset
training_data = scaled_data[0:int(len(scaled_data) * 0.8)]
test_data = scaled_data[int(len(scaled_data) * 0.8):]

len(training_data)

len(test_data)

df_train = data[0:int(len(data)*0.8)]
df_test = data[int(len(data)*0.8):]

# plot the data
# Visualisasi data
plt.figure(figsize=(16,8))
plt.title('Data Train dan Data Test')
plt.ylabel('Close Price', fontsize=18)
plt.plot(df_train)
plt.plot(df_test)

plt.legend(['Data Train', 'Data Test'], loc='lower right')
plt.show()

#Parameter LSTM
timestep = 60
unit_neuron = 50
epoch = 100
batch = 32

# membuat struktur data X_train dengan 60 timesteps
X_train = []
y_train = []
for i in range(timestep, len(training_data)):   
    X_train.append(training_data[i-timestep:i, 0])
    y_train.append(training_data[i, 0])  
    if i <= timestep:
      print(X_train)
      print(y_train)
      print()

X_train, y_train = np.array(X_train), np.array(y_train)

X_train = np.reshape(X_train, (X_train.shape[0], X_train.shape[1], 1))
X_train.shape

from keras import backend as K
def r2_keras(y_true, y_pred):
    SS_res = K.sum(K.square(y_true - y_pred))                                           
    SS_tot = K.sum(K.square(y_true - K.mean(y_true)))
    return (1 - SS_res/(SS_tot + K.epsilon()))

model_LSTM = Sequential()

#Adding the first LSTM  and some Dropout regularisation
model_LSTM.add(LSTM(units = unit_neuron, return_sequences = True, input_shape = (X_train.shape [1], 1)))
model_LSTM.add(Dropout(0.2))

# Adding a second LSTM layer and some Dropout regularisation
model_LSTM.add(LSTM(units = unit_neuron, return_sequences = True))
model_LSTM.add(Dropout(0.2))

# Adding a third LSTM layer and some Dropout regularisation
model_LSTM.add(LSTM(units = unit_neuron, return_sequences = True))
model_LSTM.add(Dropout(0.2))

# Adding a fourth LSTM layer and some Dropout regularisation
model_LSTM.add(LSTM(units = unit_neuron))
model_LSTM.add(Dropout(0.2))

# Adding the output layer
model_LSTM.add(Dense(1))

#Compiling the LSTM
model_LSTM.compile(optimizer = 'adam', 
              loss = 'mean_absolute_error', 
              metrics=[r2_keras])

# Fitting LSTM ke data train
model_LSTM.fit(X_train, y_train, epochs = epoch, batch_size = batch)

plt.figure(figsize=(16,8))
plt.title('Harga Saham Aktual VS Prediksi Data Train(LSTM)', fontsize=26)
plt.plot(y_train, label = "actual")
plt.plot(model_LSTM.predict(X_train), label = "predicted")
plt.legend()
plt.show()

# buat varibel penampung model RNN
model_RNN = Sequential()

#Adding the first SimpleRNN  and some Dropout regularisation
model_RNN.add(SimpleRNN(units = unit_neuron, return_sequences = True, input_shape = (X_train.shape [1], 1)))
model_RNN.add(Dropout(0.2))

# Adding a second SimpleRNN layer and some Dropout regularisation
model_RNN.add(SimpleRNN(units = unit_neuron, return_sequences = True))
model_RNN.add(Dropout(0.2))

# Adding a third SimpleRNN layer and some Dropout regularisation
model_RNN.add(SimpleRNN(units = unit_neuron, return_sequences = True))
model_RNN.add(Dropout(0.2))

# Adding a fourth LSTM layer and some Dropout regularisation
model_RNN.add(SimpleRNN(units = unit_neuron))
model_RNN.add(Dropout(0.2))

# Adding the output layer
model_RNN.add(Dense(1))

#Compiling the LSTM
model_RNN.compile(optimizer = 'adam', 
              loss = 'mean_absolute_error', 
              metrics=[r2_keras])

# Fitting RNN ke data train
model_RNN.fit(X_train, y_train, epochs = epoch, batch_size = batch)

plt.figure(figsize=(16,8))
plt.title('Harga Saham Aktual VS Prediksi Data Train(RNN)', fontsize=26)
plt.plot(y_train, label = "actual")
plt.plot(model_RNN.predict(X_train), label = "predicted")
plt.legend()
plt.show()

total_data = pd.concat((df_train, df_test), axis=0)
inputs = total_data[len(total_data) - len(df_test) - timestep:].values
inputs = inputs.reshape(-1,1)
inputs = sc.transform(inputs)
print(len(inputs))

# membuat struktur data X_test dengan 60 timesteps
X_test = []
y_test = []
for i in range(timestep, len(inputs)):
  X_test.append(inputs[i-timestep:i, 0])
  if i <= timestep:
    print(X_test)
    print()

# X_test = np.array(X_test)
# X_test = np.reshape(X_test, (X_test.shape[0], X_test.shape[1], 1))

X_test, y_test = np.array(X_test), np.array(y_test)

X_test = np.reshape(X_test, (X_test.shape[0], X_test.shape[1], 1))
X_test.shape

predicted_LSTM = model_LSTM.predict(X_test)
predicted_LSTM = sc.inverse_transform(
    predicted_LSTM)
print(len(predicted_LSTM))

predicted_RNN = model_RNN.predict(X_test)
predicted_RNN = sc.inverse_transform(
    predicted_RNN)
print(len(predicted_RNN))

predictionLSTM = np.array(predicted_LSTM)
predictionRNN = np.array(predicted_RNN)
df_hasil = pd.DataFrame()
df_hasil['Real Price'] = df_test['Close'].reset_index(drop = True)
df_hasil['Prediction LSTM'] = predictionLSTM
df_hasil['Prediction RNN'] = predictionRNN
df_hasil

#Menyimpan tabel hasil dari prediksi 

# df_hasil.to_excel("datatest_stock(60neuron).xlsx")

# Besar nilai kesalahan 
mae_lstm = np.mean(np.abs((df_hasil['Real Price'] - 
                       df_hasil['Prediction LSTM'])))

mae_rnn = np.mean(np.abs((df_hasil['Real Price'] - 
                       df_hasil['Prediction RNN'])))

print('Mean Absolute Error Model LSTM : ' "{:.4f}".format(mae_lstm))
print('Mean Absolute Error Model RNN : ' "{:.4f}".format(mae_rnn))

# Besar nilai kesalahan 
mape_lstm = np.mean(np.abs((df_hasil['Real Price'] - 
                       df_hasil['Prediction LSTM'])/df_hasil['Real Price'])) * 100

mape_rnn = np.mean(np.abs((df_hasil['Real Price'] - 
                       df_hasil['Prediction RNN'])/df_hasil['Real Price'])) * 100

print('Mean Absolute Percentage Error Model LSTM : ' "{:.3f}".format(mape_lstm)+'%')
print('Mean Absolute Percentage Error Model RNN : ' "{:.3f}".format(mape_rnn)+'%')

# Besar nilai akurasi dengan R Squared
r2_lstm = r2_score(df_hasil['Real Price'], df_hasil['Prediction LSTM'])
r2_lstm = r2_lstm * 100

r2_rnn = r2_score(df_hasil['Real Price'], df_hasil['Prediction RNN'])
r2_rnn = r2_rnn * 100

print ('Skor Akurasi (R Squared) Model LSTM : ' "{:.2f}".format(r2_lstm)+' %')
print ('Skor Akurasi (R Squared) Model RNN : ' "{:.2f}".format(r2_rnn)+' %')

# Visualisasi prediksi
plt.figure(figsize=(16,8))
plt.title('Harga Saham Aktual VS Prediksi', fontsize=26)
plt.xlabel('Data Test', fontsize=18)
plt.ylabel('Close Price', fontsize=18)

plt.plot(df_hasil['Real Price'])
plt.plot(df_hasil['Prediction LSTM'])
plt.plot(df_hasil['Prediction RNN'])
plt.legend(['Real Price', 'Prediction LSTM', 'Prediction RNN'], loc='lower right')
plt.show()

# Prediksi 1 hari berikutnya pada 12 Juli 2021
real_data = [inputs[len(inputs) - timestep:len(inputs+1), 0]]
real_data = np.array(real_data)
real_data = np.reshape(real_data, (real_data.shape[0], 
                                   real_data.shape[1],1))

prediction_LSTM = model_LSTM.predict(real_data)
prediction_LSTM = sc.inverse_transform(prediction_LSTM)

prediction_RNN = model_RNN.predict(real_data)
prediction_RNN = sc.inverse_transform(prediction_RNN)
print(f"Prediksi harga penutupan saham untuk 23 November 2021 Model LSTM : {prediction_LSTM}")
print(f"Prediksi harga penutupan saham untuk 23 November 2021 Model RNN : {prediction_RNN}")